#Nginx用户及组：用户 组。window下不指定
#user  nobody;

#工作进程，根据硬件调整，有人说几核cpu，就配几个，我觉得可以多一点
worker_processes  1;

#错误日志
#error_log  logs/error.log;
#error_log  logs/error.log  notice;
#error_log  logs/error.log  info;

#pid文件位置
#pid        logs/nginx.pid;

events {
	#指定进程可以打开的最大描述符：数目。
	#这个指令是指当一个nginx进程打开的最多文件描述符数目，理论值应该是最多打开文件数（ulimit -n）与nginx进程数相除，但是nginx分配请求并不是那么均匀，所以最好与ulimit -n 的值保持一致。
	#现在在linux 2.6内核下开启文件打开数为65535，worker_rlimit_nofile就相应应该填写65535。
	#这是因为nginx调度时分配请求到进程并不是那么的均衡，所以假如填写10240，总并发量达到3-4万时就有进程可能超过10240了，这时会返回502错误
	#worker_rlimit_nofile 204800;
	#工作进程的最大连接数量，根据硬件调整，和前面工作进程配合起来用，尽量大，但是别把cpu跑到100%就行
	worker_connections  1024;
}


http {
	#设定mime类型,类型由mime.type文件定义
    include       mime.types;
    default_type  application/octet-stream;

    #log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
    #                  '$status $body_bytes_sent "$http_referer" '
    #                  '"$http_user_agent" "$http_x_forwarded_for"';

    #access_log  logs/access.log  main;

	#允许sendfile方式传输文件，sendfile指令指定 nginx 是否调用sendfile 函数（zero copy 方式）来输出文件，对于普通应用，必须设为on。如果用来进行下载等应用磁盘IO重负载应用，可设置为off，以平衡磁盘与网络IO处理速度，降低系统uptime，默认为off，可以在http块，server块，location块。
    sendfile        on;
	#每个进程每次调用传输数量不能大于设定的值，默认为0，即不设上限。
	#sendfile_max_chunk 100k;
	
	#此选项允许或禁止使用socke的TCP_CORK的选项，此选项仅在使用sendfile的时候使用
    #tcp_nopush     on;

	#连接超时时间，默认为75s，可以在http，server，location块。
    #keepalive_timeout  0;
    keepalive_timeout  65;
	
	#设定通过nginx上传文件的大小
	client_max_body_size 1024m;
	# http_proxy 设置
	#proxy_buffering    off;
    #client_max_body_size   10m;
    #client_body_buffer_size   128k;
    #proxy_connect_timeout   75;
    #proxy_send_timeout   75;
    #proxy_read_timeout   75;
    #proxy_buffer_size   4k;
    #proxy_buffers   4 32k;
    #proxy_busy_buffers_size   64k;
    #proxy_temp_file_write_size  64k;
    #proxy_temp_path   /usr/local/nginx/proxy_temp 1 2;

	
	#----------------------------hash_bucket--------------------------------#
	#保存服务器名字的hash表是由指令server_names_hash_max_size 和server_names_hash_bucket_size所控制的。参数hash bucket size总是等于hash表的大小，并且是一路处理器缓存大小的倍数。在减少了在内存中的存取次数后，使在处理器中加速查找hash表键值成为可能。如果hash bucket size等于一路处理器缓存的大小，那么在查找键的时候，最坏的情况下在内存中查找的次数为2。第一次是确定存储单元的地址，第二次是在存储单元中查找键 值。因此，如果Nginx给出需要增大hash max size 或 hash bucket size的提示，那么首要的是增大前一个参数的大小.
	#server_names_hash_bucket_size 128;
	
	#客户端请求头部的缓冲区大小。这个可以根据你的系统分页大小来设置，一般一个请求头的大小不会超过1k，不过由于一般系统分页都要大于1k，所以这里设置为分页大小。
	#分页大小可以用命令getconf PAGESIZE 取得。
	#[root@web001 ~]# getconf PAGESIZE
	#4096
	#但也有client_header_buffer_size超过4k的情况，但是client_header_buffer_size该值必须设置为“系统分页大小”的整倍数。
	#client_header_buffer_size 4k;
	
	#客户请求头缓冲大小。nginx默认会用client_header_buffer_size这个buffer来读取header值，如果header过大，它会使用large_client_header_buffers来读取。
	#large_client_header_buffers 8 128k;
	
	
	
	#----------------------------open_file--------------------------------#
	#这个将为打开文件指定缓存，默认是没有启用的，max指定缓存数量，建议和打开文件数一致，inactive是指经过多长时间文件没被请求后删除缓存。
	#open_file_cache max=65535 inactive=60s;

	#这个是指多长时间检查一次缓存的有效信息。
	#例: open_file_cache max=1000 inactive=20s; 
	#	open_file_cache_valid 30s; 
	#	open_file_cache_min_uses 2; 
	#	open_file_cache_errors on;
	
	#语法:open_file_cache_errors on | off 默认值:open_file_cache_errors off 使用字段:http, server, location 这个指令指定是否在搜索一个文件是记录cache错误.
	#open_file_cache_errors off

	#语法:open_file_cache_valid time 默认值:open_file_cache_valid 60 使用字段:http, server, location 这个指令指定了何时需要检查open_file_cache中缓存项目的有效信息.
	#open_file_cache_valid 80s;
	
	#open_file_cache指令中的inactive参数时间内文件的最少使用次数，如果超过这个数字，文件描述符一直是在缓存中打开的，如上例，如果有一个文件在inactive时间内一次没被使用，它将被移除。
	#open_file_cache_min_uses 1;
	
	
	
	
	#----------------------------fastcgi--------------------------------#
	#fastcgi on;
	fastcgi_connect_timeout 300;
    fastcgi_send_timeout 300;
    fastcgi_read_timeout 300;
    fastcgi_buffer_size 128k;
    fastcgi_buffers 4 128k;
    fastcgi_busy_buffers_size 256k;
    fastcgi_temp_file_write_size 256k;
	
	#----------------------------gzip--------------------------------#
    #gzip  on;
    gzip_min_length  1k;
    gzip_buffers     4 32k;
    gzip_http_version 1.1;
    gzip_comp_level 2;
    gzip_types       text/plain application/x-javascript text/css application/xml;
    gzip_vary on;
    gzip_disable "MSIE [1-6].";
	
	#----------------------------log format--------------------------------#
	#log format 日志的格式
	#日志格式设置。
	#$remote_addr与$http_x_forwarded_for用以记录客户端的ip地址；
	#$remote_user：用来记录客户端用户名称；
	#$time_local： 用来记录访问时间与时区；
	#$request： 用来记录请求的url与http协议；
	#$status： 用来记录请求状态；成功是200，
	#$body_bytes_sent ：记录发送给客户端文件主体内容大小；
	#$http_referer：用来记录从那个页面链接访问过来的；
	#$http_user_agent：记录客户浏览器的相关信息；
	#通常web服务器放在反向代理的后面，这样就不能获取到客户的IP地址了，通过$remote_add拿到的IP地址是反向代理服务器的iP地址。反向代理服务器在转发请求的http头信息中，可以增加x_forwarded_for信息，用以记录原有客户端的IP地址和原来客户端的请求的服务器地址。
    log_format  access  '$remote_addr - $remote_user [$time_local] "$request" '
             '$status $body_bytes_sent "$http_referer" '
             '"$http_user_agent" $http_x_forwarded_for';
                access_log off;
	#负载均衡配置 这里最好多个而且ip_hash也不能开启，注释掉，否则会有curl localhost不成功的情况 因为本地只启了一个php-cgi进程，在用户访问一个php页面的时候nginx已将该进程占用，在该进程又发起http请求时，nginx发现这个仅有的进程已被占用而造成阻塞，就这样造成了死锁，一直到超时。
	#www.piaowu.test名字可以随便改 调用
	upstream www.piaowu.test {  
		#ip_hash;
		server 127.0.0.1:9000 weight=1;
		server 127.0.0.1:9001 weight=1;
		server 127.0.0.1:9002 weight=1;
		server 127.0.0.1:9003 weight=1;
	}
	
	
    server {
		#监听端口
        listen       8888;
		#监听地址
        server_name  localhost;

        #charset koi8-r;

		#访问日志
        #access_log  logs/host.access.log  main;

        location / {
            root   "C:/www/tools/wwwroot";
            index  nginx.html index.html index.htm index.php;
        }

        #error_page  404              /404.html;

        # redirect server error pages to the static page /50x.html
        #
        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   "C:/www/tools/wwwroot";
        }

        # proxy the PHP scripts to Apache listening on 127.0.0.1:80
        #
        #location ~ \.php$ {
        #    proxy_pass   http://127.0.0.1;
        #}
		
        # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
        #
        location ~ \.php$ {
            root   "C:/www/tools/wwwroot";
			index  index.php;
            fastcgi_pass   127.0.0.1:9000;
			#fastcgi_pass   phpfastcgi_proxy;
			#fastcgi_pass   http://phpfastcgi_proxy;
            fastcgi_index  index.php;
            fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
            #include        fastcgi_params;
			include fastcgi.conf;
        }

        # deny access to .htaccess files, if Apache's document root
        # concurs with nginx's one
        #
        #location ~ /\.ht {
        #    deny  all;
        #}
    }


    # another virtual host using mix of IP-, name-, and port-based configuration
    #
    #server {
    #    listen       8000;
    #    listen       somename:8080;
    #    server_name  somename  alias  another.alias;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}


    # HTTPS server
    #
    #server {
    #    listen       443 ssl;
    #    server_name  localhost;

    #    ssl_certificate      cert.pem;
    #    ssl_certificate_key  cert.key;

    #    ssl_session_cache    shared:SSL:1m;
    #    ssl_session_timeout  5m;

    #    ssl_ciphers  HIGH:!aNULL:!MD5;
    #    ssl_prefer_server_ciphers  on;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}
    #include "vhost/vhosts.conf";

}
